(()=>{"use strict";function e(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function n(e,t){i(e,t),t.add(e)}function r(e,t,n){i(e,t),t.set(e,n)}function i(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}function o(e,t,n){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return n}function a(e,t){return function(e,t){return t.get?t.get.call(e):t.value}(e,c(e,t,"get"))}function l(e,t,n){return function(e,t,n){if(t.set)t.set.call(e,n);else{if(!t.writable)throw new TypeError("attempted to set read only private field");t.value=n}}(e,c(e,t,"set"),n),n}function c(e,t,n){if(!t.has(e))throw new TypeError("attempted to "+n+" private field on non-instance");return t.get(e)}var s=new WeakMap,u=new WeakMap,d=new WeakMap,h=new WeakMap,v=new WeakMap,f=new WeakMap,p=new WeakMap,b=new WeakMap,w=new WeakMap,m=new WeakSet,_=new WeakSet,y=new WeakSet,S=new WeakMap,g=new WeakMap,k=new WeakSet,E=function(){function e(t){var i=this,o=t.containerSelector,c=t.itemsSelector,E=t.nextScrollerSelector,L=t.prevScrollerSelector,q=t.activeItemClass,M=t.textItemsSelectors;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),n(this,k),n(this,y),n(this,_),n(this,m),r(this,s,{writable:!0,value:void 0}),r(this,u,{writable:!0,value:void 0}),r(this,d,{writable:!0,value:void 0}),r(this,h,{writable:!0,value:void 0}),r(this,v,{writable:!0,value:void 0}),r(this,f,{writable:!0,value:void 0}),r(this,p,{writable:!0,value:void 0}),r(this,b,{writable:!0,value:void 0}),r(this,w,{writable:!0,value:void 0}),r(this,S,{writable:!0,value:function(e){var t="next"===e?a(i,b):0,n="next"===e?0:a(i,b);a(i,u)[a(i,p)].classList.remove(a(i,d)),a(i,p)===t&&(a(i,u)[n].scrollIntoView({inline:"start",block:"nearest",behavior:"auto"}),l(i,p,n)),l(i,p,"next"===e?a(i,p)+1:a(i,p)-1)}}),r(this,g,{writable:!0,value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"smooth";a(i,u)[a(i,p)].classList.add(a(i,d)),a(i,u)[a(i,p)].scrollIntoView({inline:"start",block:"nearest",behavior:e}),a(i,w).forEach((function(e){var t=e.element,n=e.source;t.textContent=a(i,u)[a(i,p)].dataset[n]}))}}),l(this,s,document.querySelector(o)),l(this,u,Array.from(document.querySelectorAll(c))),l(this,d,q),l(this,h,M),l(this,v,document.querySelector(E)),l(this,f,document.querySelector(L))}var i,c;return i=e,(c=[{key:"init",value:function(){l(this,p,1),l(this,b,a(this,u).length),o(this,_,q).call(this),o(this,y,M).call(this),o(this,k,W).call(this),a(this,g).call(this,"auto"),o(this,m,L).call(this)}}])&&t(i.prototype,c),Object.defineProperty(i,"prototype",{writable:!1}),e}();function L(){window.scrollTo(0,0)}function q(){l(this,w,a(this,h).map((function(e){return{element:document.querySelector(e.selector),source:e.attributeName}})))}function M(){var t,n=a(this,u)[a(this,b)-1].cloneNode(!0),r=a(this,u)[0].cloneNode(!0);a(this,s).append(r),a(this,s).prepend(n),l(this,u,[n].concat(function(t){if(Array.isArray(t))return e(t)}(t=a(this,u))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[r]))}function W(){var e=this;a(this,v).addEventListener("click",(function(){a(e,S).call(e,"next"),a(e,g).call(e)})),a(this,f).addEventListener("click",(function(){a(e,S).call(e,"prev"),a(e,g).call(e)}))}var I=document.querySelectorAll("[data-href]"),x=document.querySelector(".footer__theme-switch"),A=document.querySelector(".page");!function(e,t){t.addEventListener("touchstart",(function(e){l=e.target,a=Date.now(),n=e.touches[0].clientX,r=e.touches[0].clientY,i=0,o=0}),!1),t.addEventListener("touchmove",(function(e){if(n&&r){var t=e.touches[0].clientX,a=e.touches[0].clientY;i=n-t,o=r-a}}),!1),t.addEventListener("touchend",(function(e){if(l===e.target){var t=Date.now()-a,c="",s=e.changedTouches||e.touches||[];if(Math.abs(i)>Math.abs(o)?Math.abs(i)>20&&t<500&&(c=i>0?"swiped-left":"swiped-right"):Math.abs(o)>20&&t<500&&(c=o>0?"swiped-up":"swiped-down"),""!==c){var u,d,h,v,f={dir:c.replace(/swiped-/,""),touchType:null!==(u=(null!==(d=s[0])&&void 0!==d?d:{}).touchType)&&void 0!==u?u:"direct",xStart:parseInt(n,10),xEnd:parseInt((null!==(h=s[0])&&void 0!==h?h:{}).clientX||-1,10),yStart:parseInt(r,10),yEnd:parseInt((null!==(v=s[0])&&void 0!==v?v:{}).clientY||-1,10)};l.dispatchEvent(new CustomEvent("swiped",{bubbles:!0,cancelable:!0,detail:f})),l.dispatchEvent(new CustomEvent(c,{bubbles:!0,cancelable:!0,detail:f}))}n=null,r=null,a=null}}),!1);var n=null,r=null,i=null,o=null,a=null,l=null}(window,document),new E({containerSelector:".roads__pics-list",itemsSelector:".roads__pics-item",activeItemClass:"roads__pics-item_active",nextScrollerSelector:".roads__button_dir_right",prevScrollerSelector:".roads__button_dir_left",textItemsSelectors:[{selector:".roads__title",attributeName:"title"},{selector:".roads__text",attributeName:"text"}]}).init(),I.forEach((function(e){e.addEventListener("click",(function(){var t=e.dataset.href;document.querySelector(t).scrollIntoView({behavior:"smooth"})}))})),x.addEventListener("click",(function(){A.classList.toggle("page_dark"),x.querySelector(".footer__switch-toggle").classList.toggle("footer__switch-toggle_dark")})),document.querySelectorAll(".bikes__button").forEach((function(e){e.addEventListener("click",(function(){document.querySelector(".bikes__type_active").classList.remove("bikes__type_active"),document.querySelector(".bikes__button_active").classList.remove("bikes__button_active"),document.querySelector("#bikes-type-".concat(e.dataset.type)).classList.add("bikes__type_active"),e.classList.add("bikes__button_active")}))})),document.querySelector(".header__burger").addEventListener("click",(function(){document.querySelector(".header__links").classList.toggle("header__links_opened"),document.querySelector(".header__burger").classList.toggle("hamburger_active")})),document.querySelector(".header").addEventListener("swiped",(function(e){console.log(e.target),console.log(e.detail),console.log(e.detail.dir)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,